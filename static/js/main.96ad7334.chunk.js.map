{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Page","props","state","rent","totalCost","priceRentalRatio","handleCostChange","bind","handleRentChange","houseCost","isNaN","toFixed","event","ratioDesc","this","updatePriceRentalRatioStr","target","value","console","log","setState","style","color","fontSize","marginLeft","marginBottom","borderColor","marginTop","width","textAlign","type","onChange","placeholder","name","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,8MCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,KACNC,UAAW,KACXC,iBAAkB,kCAEpB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBARP,E,uFAWOJ,EAAMM,GAE9B,OAAIC,MAAMP,IAASA,GAAQ,EAClB,6CAELO,MAAMD,IAAcA,GAAa,EAC5B,8CAEU,GAAPN,EAAYM,EAAY,KACpBE,QAAQ,GAAK,M,uCAKdC,GACf,IAAIC,EAAYC,KAAKC,0BAA0BD,KAAKZ,MAAMC,KAAMS,EAAMI,OAAOC,OAC7EC,QAAQC,IAAI,+BACZL,KAAKM,SAAU,CACbhB,UAAWQ,EAAMI,OAAOC,MACxBZ,iBAAkBQ,M,uCAILD,GACf,IAAIC,EAAYC,KAAKC,0BAA0BH,EAAMI,OAAOC,MAAOH,KAAKZ,MAAME,WAC9Ec,QAAQC,IAAI,+BACZL,KAAKM,SAAU,CACbjB,KAAMS,EAAMI,OAAOC,MACnBZ,iBAAkBQ,M,+BAOpB,OACE,6BACE,wBAAIQ,MAAO,CACTC,MAAO,UACPC,SAAU,GACVC,WAAY,GACZC,aAAc,KAJhB,kCADF,IAMgB,wBAAIJ,MAAO,CACvBK,YAAa,aAEf,wBAAIL,MAAO,CACTC,MAAO,OACPC,SAAU,OACVC,WAAY,GACZG,UAAW,MACXF,aAAc,IALhB,gQASA,wBAAIJ,MAAO,CACTC,MAAO,OACPC,SAAU,OACVC,WAAY,GACZG,UAAW,MACXF,aAAc,IALhB,2LASA,wBAAIJ,MAAO,CACTC,MAAO,OACPC,SAAU,OACVC,WAAY,GACZG,UAAW,MACXF,aAAc,SALhB,4DASA,0BAAMJ,MAAO,CACXC,MAAO,OACPC,SAAU,OACVC,WAAY,GACZG,UAAW,MACXF,aAAc,QAEd,wBAAIJ,MAAO,CACTC,MAAO,OACPC,SAAU,OACVI,UAAW,MACXF,aAAc,QAJhB,wCAMA,2BACEJ,MAAO,CACLO,MAAO,QACPC,UAAW,UAEbC,KAAK,SAASb,MAAOH,KAAKZ,MAAMC,KAAM4B,SAAUjB,KAAKN,iBAAkBwB,YAAY,6BACrF,2CACA,2BACEX,MAAO,CACLO,MAAO,QACPC,UAAW,UAEbC,KAAK,SAASb,MAAOH,KAAKZ,MAAME,UAAW2B,SAAUjB,KAAKR,iBAAkB0B,YAAY,mCAC1F,sCAAkB,2BAAOC,KAAK,oBAAZ,IAAiCnB,KAAKZ,MAAMG,iBAA5C,W,GA9GT6B,IAAMC,WAuHzBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.96ad7334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rent: null,\n      totalCost: null,\n      priceRentalRatio: '请输入数值'\n    };\n    this.handleCostChange = this.handleCostChange.bind(this);\n    this.handleRentChange = this.handleRentChange.bind(this);\n\n  }\n  updatePriceRentalRatioStr(rent, houseCost) {\n    var message = \"\";\n    if (isNaN(rent) || rent <= 0) {\n      return \"请输入租金金额\";\n    }\n    if (isNaN(houseCost) || houseCost <= 0) {\n      return \"请输入房屋成本\";\n    }\n    let ratio = rent * 12 / houseCost * 100;\n    message = ratio.toFixed(1) + '%'\n\n    return message;\n  }\n\n  handleCostChange(event) {\n    let ratioDesc = this.updatePriceRentalRatioStr(this.state.rent, event.target.value);\n    console.log('=====handleCostChange======');\n    this.setState(({\n      totalCost: event.target.value,\n      priceRentalRatio: ratioDesc,\n    }));\n  }\n\n  handleRentChange(event) {\n    let ratioDesc = this.updatePriceRentalRatioStr(event.target.value, this.state.totalCost);\n    console.log('=====handleRentChange======');\n    this.setState(({\n      rent: event.target.value,\n      priceRentalRatio: ratioDesc,\n    }));\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <h1 style={{\n          color: \"#66b2ff\",\n          fontSize: 40,\n          marginLeft: 20,\n          marginBottom: 10,\n        }}>房屋租售比</h1> <hr style={{\n          borderColor: '#66b2ff',\n        }} />\n        <h4 style={{\n          color: '#333',\n          fontSize: '14px',\n          marginLeft: 20,\n          marginTop: '5px',\n          marginBottom: 0,\n        }}>\n          租售比，一般情况下指普通消费者都把它归纳为房屋租金与售价的比例, 租售比 = 租金收益/房价。\n          </h4>\n        <h4 style={{\n          color: '#333',\n          fontSize: '14px',\n          marginLeft: 20,\n          marginTop: '5px',\n          marginBottom: 0,\n        }}>\n          比如说总成本 200万的房，每月租金为 3000元，每年租⾦回报有 3000 * 12 = 36000元，\n          </h4>\n        <h4 style={{\n          color: '#333',\n          fontSize: '14px',\n          marginLeft: 20,\n          marginTop: '5px',\n          marginBottom: '15px',\n        }}>\n          则租售比为 36,000 / 2,000,000 = 1.8%\n          </h4>\n        <form style={{\n          color: '#333',\n          fontSize: '14px',\n          marginLeft: 20,\n          marginTop: '5px',\n          marginBottom: '5px',\n        }}>\n          <h1 style={{\n            color: '#333',\n            fontSize: '14px',\n            marginTop: '5px',\n            marginBottom: '8px'\n          }}>租售比计算器</h1>\n          <input\n            style={{\n              width: '100px',\n              textAlign: 'center',\n            }}\n            type=\"number\" value={this.state.rent} onChange={this.handleRentChange} placeholder=\"每月房租\" />\n          <label> x 12 / </label>\n          <input\n            style={{\n              width: '100px',\n              textAlign: 'center'\n            }}\n            type=\"number\" value={this.state.totalCost} onChange={this.handleCostChange} placeholder=\"房屋总成本\" />\n          <label> = </label><label name=\"priceRentalRatio\"> {this.state.priceRentalRatio} </label>\n        </form>\n\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <Page />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}